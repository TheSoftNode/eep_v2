import React, { useRef, useEffect } from 'react';
import { RotateCcw, Sparkles, AlertCircle } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { CommandOutput } from './terminalTypes';

interface TerminalContentProps {
    history: CommandOutput[];
    isProcessing: boolean;
    showPairingInput: boolean;
    pairingCode: string;
    setPairingCode: (code: string) => void;
    onPairSubmit: (e: React.FormEvent) => void;
    onFocusClick: () => void;
}

export default function TerminalContent({
    history,
    isProcessing,
    showPairingInput,
    pairingCode,
    setPairingCode,
    onPairSubmit,
    onFocusClick
}: TerminalContentProps) {
    const terminalRef = useRef<HTMLDivElement>(null);

    // Auto-scroll to bottom when history changes
    useEffect(() => {
        if (terminalRef.current) {
            terminalRef.current.scrollTop = terminalRef.current.scrollHeight;
        }
    }, [history]);

    return (
        <div
            ref={terminalRef}
            className="flex-1 p-4 overflow-y-auto font-mono text-sm text-gray-300 bg-gray-900"
            onClick={onFocusClick}
        >
            {/* Pairing code input when needed */}
            {showPairingInput && (
                <div className="mb-4 p-4 bg-indigo-900/30 border border-indigo-800 rounded-lg">
                    <div className="flex items-center mb-2">
                        <AlertCircle className="h-5 w-5 text-indigo-400 mr-2" />
                        <span className="font-medium text-indigo-300">Pairing Required</span>
                    </div>
                    <p className="mb-3 text-gray-300">
                        Enter the pairing code generated by your local terminal agent:
                    </p>
                    <form onSubmit={onPairSubmit} className="flex">
                        <Input
                            type="text"
                            placeholder="6-digit code"
                            value={pairingCode}
                            onChange={(e) => setPairingCode(e.target.value)}
                            className="bg-transparent border-indigo-600 focus-visible:ring-indigo-500"
                            maxLength={6}
                        />
                        <Button
                            type="submit"
                            className="ml-2 bg-indigo-600 hover:bg-indigo-700"
                        >
                            Connect
                        </Button>
                    </form>
                    <p className="mt-2 text-xs text-gray-400">
                        Run <code className="bg-gray-800 px-1.5 py-0.5 rounded">node index.js</code> in the agent folder, then generate a code from the system tray icon.
                    </p>
                </div>
            )}

            {/* Terminal history */}
            {history.map((item) => (
                <div key={item.id} className="mb-2">
                    {item.type === 'command' && (
                        <div className="flex">
                            <span className="text-green-400 mr-2">$</span>
                            <span>{item.content}</span>
                        </div>
                    )}
                    {item.type === 'output' && (
                        <div className="pl-4 whitespace-pre-wrap">{item.content}</div>
                    )}
                    {item.type === 'error' && (
                        <div className="pl-4 text-red-400 whitespace-pre-wrap">{item.content}</div>
                    )}
                    {item.type === 'info' && (
                        <div className="pl-4 text-blue-400 whitespace-pre-wrap">{item.content}</div>
                    )}
                    {item.type === 'ai-suggestion' && (
                        <div className="mt-2 mb-2 p-3 bg-indigo-900/30 border-l-2 border-indigo-500 rounded whitespace-pre-wrap">
                            <div className="flex items-center mb-1">
                                <Sparkles className="h-4 w-4 text-indigo-400 mr-2" />
                                <span className="text-indigo-300 font-semibold">AI Assistant</span>
                            </div>
                            <div className="text-gray-300">{item.content}</div>
                        </div>
                    )}
                </div>
            ))}

            {/* Processing indicator */}
            {isProcessing && (
                <div className="flex items-center text-gray-400">
                    <div className="animate-spin mr-2">
                        <RotateCcw className="h-3 w-3" />
                    </div>
                    <span>Processing...</span>
                </div>
            )}
        </div>
    );
}